#!/bin/bash
# Deploy Claude Code configuration to selected repositories
# Custom deployment for specific repos

set -e

WESCOBAR_DIR="/mnt/d/berry/Projects/Wescobar"
WORK_DIR="/tmp/claude-config-deployment"
GITHUB_USER="BerryKuipers"
BRANCH_PREFIX="claude/add-gh-auth-hooks"

# Selected repositories for this deployment
REPOS=(
  # HIGH PRIORITY
  "TribeVibe"
  "home-sage"
  "TuneScout"
  "SceneSpeak"
  "quantfolio"

  # MEDIUM PRIORITY
  "AgenticDevelopment"
  "TetherKey"
  "mcp-servers"
  "mcp-qdrant"

  # ACTIVE PROJECTS
  "GreenSphere-"
  "oraculum"
  "audiotagger_2025"
  "MixItUp"

  # ADDITIONAL
  "GenZeditAi"

  # NEW PROJECT (needs development branch)
  "Rijwijs"
)

# Repos that need development branch created from main
NEEDS_DEV_BRANCH=("Rijwijs")

CREATE_PRS=true
CLEANUP_AFTER=false  # Keep for inspection

echo "üöÄ Deploying Claude Code configuration to selected repositories..."
echo "Source: $WESCOBAR_DIR"
echo "Target repos: ${#REPOS[@]}"
echo ""

# Create work directory
mkdir -p "$WORK_DIR"
cd "$WORK_DIR"

# Process each repository
SUCCESS_COUNT=0
FAILED_COUNT=0
SKIPPED_COUNT=0

for REPO_NAME in "${REPOS[@]}"; do
  echo "---"
  echo "üì¶ Processing: $REPO_NAME"

  REPO_URL="https://github.com/${GITHUB_USER}/${REPO_NAME}.git"
  REPO_DIR="$WORK_DIR/$REPO_NAME"
  BRANCH_NAME="${BRANCH_PREFIX}-$(date +%Y%m%d)"

  # Clone or update repository
  if [ -d "$REPO_DIR" ]; then
    echo "  ‚Üí Repository already cloned, updating..."
    cd "$REPO_DIR"
    git fetch origin
  else
    echo "  ‚Üí Cloning via gh CLI..."
    if ! gh repo clone "$GITHUB_USER/$REPO_NAME" "$REPO_DIR" 2>/dev/null; then
      echo "  ‚ùå Failed to clone (repo may not exist or not accessible)"
      SKIPPED_COUNT=$((SKIPPED_COUNT + 1))
      continue
    fi
    cd "$REPO_DIR"
  fi

  # Get default branch name
  DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
  echo "  ‚Üí Default branch: $DEFAULT_BRANCH"

  # Check if this repo needs development branch created
  NEEDS_DEV=false
  for CHECK_REPO in "${NEEDS_DEV_BRANCH[@]}"; do
    if [ "$REPO_NAME" = "$CHECK_REPO" ]; then
      NEEDS_DEV=true
      break
    fi
  done

  if [ "$NEEDS_DEV" = true ]; then
    echo "  ‚Üí Special handling: Creating development branch from main"
    git checkout "$DEFAULT_BRANCH"
    git pull origin "$DEFAULT_BRANCH"

    # Check if development branch exists remotely
    if git ls-remote --heads origin development | grep -q development; then
      echo "  ‚Üí Development branch exists, using it"
      git checkout development
      git pull origin development
    else
      echo "  ‚Üí Creating new development branch from $DEFAULT_BRANCH"
      git checkout -b development
      git push -u origin development
    fi

    # Now use development as the base
    BASE_BRANCH="development"
  else
    BASE_BRANCH="$DEFAULT_BRANCH"
  fi

  # Configure git to use gh CLI for auth
  git config credential.helper ""
  git config --local credential.helper '!gh auth git-credential'

  # Checkout base branch
  git checkout "$BASE_BRANCH"
  git pull origin "$BASE_BRANCH"

  # Check if feature branch already exists
  if git show-ref --verify --quiet "refs/heads/$BRANCH_NAME"; then
    echo "  ‚ö†Ô∏è  Branch $BRANCH_NAME already exists, using it"
    git checkout "$BRANCH_NAME"
  else
    echo "  ‚Üí Creating branch: $BRANCH_NAME from $BASE_BRANCH"
    git checkout -b "$BRANCH_NAME"
  fi

  # Create directories
  echo "  ‚Üí Creating directories..."
  mkdir -p .claude scripts docs

  # Copy configuration files
  echo "  ‚Üí Copying SessionStart hooks..."
  cp "$WESCOBAR_DIR/.claude/settings.json" .claude/

  echo "  ‚Üí Copying gh CLI scripts..."
  cp "$WESCOBAR_DIR/scripts/install-gh-cli.sh" scripts/
  cp "$WESCOBAR_DIR/scripts/gh-login-if-token.sh" scripts/
  cp "$WESCOBAR_DIR/scripts/gh-detect-or-fallback.sh" scripts/
  cp "$WESCOBAR_DIR/scripts/sync-claude-toolkit.sh" scripts/
  chmod +x scripts/install-gh-cli.sh scripts/gh-login-if-token.sh scripts/gh-detect-or-fallback.sh scripts/sync-claude-toolkit.sh

  echo "  ‚Üí Updating .gitignore for state directory..."
  if [ -f ".gitignore" ]; then
    if ! grep -q ".claude/.state/" .gitignore; then
      echo "" >> .gitignore
      echo "# Claude runtime state (generated by hooks)" >> .gitignore
      echo ".claude/.state/" >> .gitignore
    fi
  fi

  echo "  ‚Üí Copying agents and commands..."
  cp "$WESCOBAR_DIR/.claude/config.yml" .claude/ || echo "  ‚ö†Ô∏è  config.yml not found, skipping"
  cp -r "$WESCOBAR_DIR/.claude/agents" .claude/ 2>/dev/null || echo "  ‚ö†Ô∏è  agents/ not found, skipping"
  cp -r "$WESCOBAR_DIR/.claude/commands" .claude/ 2>/dev/null || echo "  ‚ö†Ô∏è  commands/ not found, skipping"

  echo "  ‚Üí Copying documentation..."
  cp "$WESCOBAR_DIR/docs/CLAUDE_CODE_WEB_SETUP_GUIDE.md" docs/ 2>/dev/null || echo "  ‚ö†Ô∏è  Some docs missing"
  cp "$WESCOBAR_DIR/docs/COPY_TO_NEW_REPO.md" docs/ 2>/dev/null || true
  cp "$WESCOBAR_DIR/docs/PROJECT_CUSTOMIZATION_CHECKLIST.md" docs/ 2>/dev/null || true

  # Customize config.yml
  echo "  ‚Üí Customizing config.yml..."
  if [ -f ".claude/config.yml" ]; then
    sed -i "s|tempDir: \"/tmp/.*-orchestrator\"|tempDir: \"/tmp/${REPO_NAME}-orchestrator\"|" .claude/config.yml
  fi

  # Check if there are changes
  if git diff --quiet && git diff --cached --quiet; then
    echo "  ‚ÑπÔ∏è  No changes detected (config already present?)"
    SKIPPED_COUNT=$((SKIPPED_COUNT + 1))
    continue
  fi

  # Stage changes
  echo "  ‚Üí Staging changes..."
  git add .claude/ scripts/ docs/ .gitignore 2>/dev/null || git add .claude/ scripts/

  # Commit
  echo "  ‚Üí Committing..."
  git commit -m "$(cat <<'EOF'
feat: Add Claude Code SessionStart hooks with gh CLI auto-auth

Implements automatic GitHub CLI authentication system for Claude Code web sessions:

**New Scripts:**
- scripts/gh-login-if-token.sh - Auto-authenticate with GH_TOKEN
- scripts/gh-detect-or-fallback.sh - Detect gh CLI and suggest curl fallback
- scripts/install-gh-cli.sh - Auto-install gh CLI
- scripts/sync-claude-toolkit.sh - Sync .claude-toolkit submodule

**Configuration:**
- .claude/settings.json - SessionStart hooks for auto-setup
- .gitignore - Ignore .claude/.state/ runtime files

**Features:**
‚úÖ Auto-login with GH_TOKEN on session start
‚úÖ State file tracking (.claude/.state/can_gh)
‚úÖ Graceful fallback to curl when gh unavailable
‚úÖ Works in both CLI and web sessions

**SessionStart Hook Order:**
1. sync-claude-toolkit.sh - Sync submodule
2. install-gh-cli.sh - Install gh CLI
3. gh-login-if-token.sh - Authenticate
4. gh-detect-or-fallback.sh - Report status

Ready for Claude Code web sessions!

ü§ñ Generated with [Claude Code](https://claude.com/claude-code)

Co-Authored-By: Claude <noreply@anthropic.com>
EOF
)"

  # Push to GitHub
  echo "  ‚Üí Pushing to GitHub..."
  if git push -u origin "$BRANCH_NAME" 2>&1 | tee /tmp/git-push-output.txt; then
    echo "  ‚úÖ Pushed successfully!"

    # Create PR if enabled
    if [ "$CREATE_PRS" = true ]; then
      echo "  ‚Üí Creating pull request..."
      PR_BODY="## Add Claude Code Configuration with GitHub CLI Auto-Auth

This PR adds comprehensive Claude Code configuration for web sessions with automatic GitHub authentication.

### What's Included:

**SessionStart Hooks:**
- Auto-installs GitHub CLI on every session start
- Auto-authenticates with GH_TOKEN
- Detects gh CLI availability and suggests curl fallback
- No root access required (installs to ~/.local/bin)
- State file tracking at .claude/.state/can_gh

**Scripts:**
- \`scripts/install-gh-cli.sh\` - Install gh CLI automatically
- \`scripts/gh-login-if-token.sh\` - Authenticate with GH_TOKEN
- \`scripts/gh-detect-or-fallback.sh\` - Status check & fallback suggestions
- \`scripts/sync-claude-toolkit.sh\` - Sync .claude-toolkit submodule

### Benefits:

‚úÖ Consistent development environment across sessions
‚úÖ Automated tool installation (gh CLI)
‚úÖ Automatic authentication
‚úÖ Graceful fallback when tools unavailable
‚úÖ Works in both CLI and web sessions

### Next Steps:

1. Review the changes
2. Test in a Claude Code session
3. Customize for your project if needed

See \`docs/PROJECT_CUSTOMIZATION_CHECKLIST.md\` for customization options.

ü§ñ Generated with [Claude Code](https://claude.com/claude-code)"

      if gh pr create \
        --repo "$GITHUB_USER/$REPO_NAME" \
        --title "feat: Add Claude Code SessionStart hooks with gh CLI auto-auth" \
        --body "$PR_BODY" \
        --head "$BRANCH_NAME" \
        --base "$BASE_BRANCH" 2>&1; then
        echo "  ‚úÖ Pull request created!"
        SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
      else
        echo "  ‚ö†Ô∏è  PR creation failed, but branch is pushed"
        SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
      fi
    else
      echo "  ‚úÖ Branch pushed (PR creation disabled)"
      SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
    fi
  else
    echo "  ‚ùå Push failed"
    FAILED_COUNT=$((FAILED_COUNT + 1))
  fi

  echo ""
done

# Cleanup
if [ "$CLEANUP_AFTER" = true ]; then
  echo "üßπ Cleaning up work directory..."
  cd /tmp
  rm -rf "$WORK_DIR"
else
  echo "üìÅ Work directory preserved: $WORK_DIR"
fi

# Summary
echo "---"
echo "üìä Deployment Summary:"
echo "  ‚úÖ Successful: $SUCCESS_COUNT"
echo "  ‚ùå Failed: $FAILED_COUNT"
echo "  ‚è≠Ô∏è  Skipped: $SKIPPED_COUNT"
echo "  üì¶ Total: ${#REPOS[@]}"
echo ""

if [ $SUCCESS_COUNT -gt 0 ]; then
  echo "üéâ Successfully deployed to $SUCCESS_COUNT repositories!"
  echo ""
  echo "View pull requests:"
  for REPO_NAME in "${REPOS[@]}"; do
    echo "  https://github.com/$GITHUB_USER/$REPO_NAME/pulls"
  done
  echo ""
fi

if [ $FAILED_COUNT -gt 0 ]; then
  echo "‚ö†Ô∏è  Some deployments failed. Check output above for details."
fi

echo "Done!"
