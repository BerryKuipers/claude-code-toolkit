name: üîç PR Checks

on:
  pull_request:
    branches: [ development, main ]
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  pr-validation:
    name: üõ°Ô∏è PR Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better analysis
        
    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
        
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: üß™ Quick validation tests
      env:
        BITVAVO_API_KEY: "test_key"
        BITVAVO_API_SECRET: "test_secret"
        OPENAI_API_KEY: "test_openai_key"
        ANTHROPIC_API_KEY: "test_anthropic_key"
      run: |
        # Quick syntax and import validation only
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        # Run only critical API key tests that were failing
        pytest tests/test_api_keys.py::TestEnvironmentLoading::test_env_file_exists -v
        pytest tests/test_api_keys.py::TestAPIKeyPresence::test_ai_api_keys_present -v

    - name: üîç Quick lint check
      run: |
        # Check for syntax errors and undefined names only
        flake8 src/ tests/ dashboard.py --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: üöÄ Validate dashboard startup
      env:
        BITVAVO_API_KEY: "test_key"
        BITVAVO_API_SECRET: "test_secret"
        OPENAI_API_KEY: "test_openai_key"
        ANTHROPIC_API_KEY: "test_anthropic_key"
      run: |
        # Quick validation that dashboard can start
        python -c "
        import sys
        sys.path.append('.')
        try:
            import dashboard
            print('‚úÖ Dashboard imports successfully')
        except Exception as e:
            print(f'‚ùå Dashboard import failed: {e}')
            sys.exit(1)
        "
        
    - name: üìù Comment on PR
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('ü§ñ PR Validation Results')
          );
          
          const status = '${{ job.status }}';
          const conclusion = status === 'success' ? '‚úÖ PASSED' : '‚ùå FAILED';
          
          const body = `## ü§ñ PR Validation Results
          
          **Status**: ${conclusion}
          
          ### Quick Validation Checks:
          - üß™ **Critical Tests**: ${status === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}
          - üîç **Syntax Check**: ${status === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}
          - üöÄ **Import Check**: ${status === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}

          > **Note**: Full test suite runs separately in "Test Suite" workflow
          
          ${status === 'success' ? 
            'üéâ **All checks passed!** This PR is ready for review.' : 
            '‚ö†Ô∏è **Some checks failed.** Please review the workflow logs and fix any issues.'
          }
          
          ---
          *Automated by GitHub Actions ‚Ä¢ [View Details](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }

  require-checks:
    name: üõ°Ô∏è Require Checks
    runs-on: ubuntu-latest
    needs: pr-validation
    if: always()
    
    steps:
    - name: ‚úÖ Validate required checks
      run: |
        if [[ "${{ needs.pr-validation.result }}" == "success" ]]; then
          echo "‚úÖ All required checks passed! PR can be merged."
          exit 0
        else
          echo "‚ùå Required checks failed. PR cannot be merged."
          echo "PR Validation: ${{ needs.pr-validation.result }}"
          exit 1
        fi
