name: 🔍 PR Checks

on:
  pull_request:
    branches: [ development, main ]
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  pr-validation:
    name: 🛡️ PR Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better analysis
        
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🧪 Run critical tests
      env:
        BITVAVO_API_KEY: "test_key"
        BITVAVO_API_SECRET: "test_secret"
        OPENAI_API_KEY: "test_openai_key"
        ANTHROPIC_API_KEY: "test_anthropic_key"
      run: |
        # Run tests with focus on changed files
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        pytest tests/ -v --tb=short
        
    - name: 🔍 Quick lint check
      run: |
        # Check for syntax errors and undefined names
        flake8 src/ tests/ dashboard.py --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: 📊 Check test coverage
      env:
        BITVAVO_API_KEY: "test_key"
        BITVAVO_API_SECRET: "test_secret"
        OPENAI_API_KEY: "test_openai_key"
        ANTHROPIC_API_KEY: "test_anthropic_key"
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        pytest tests/ --cov=src --cov-report=term --cov-fail-under=5
        
    - name: 🚀 Validate dashboard startup
      env:
        BITVAVO_API_KEY: "test_key"
        BITVAVO_API_SECRET: "test_secret"
        OPENAI_API_KEY: "test_openai_key"
        ANTHROPIC_API_KEY: "test_anthropic_key"
      run: |
        # Quick validation that dashboard can start
        python -c "
        import sys
        sys.path.append('.')
        try:
            import dashboard
            print('✅ Dashboard imports successfully')
        except Exception as e:
            print(f'❌ Dashboard import failed: {e}')
            sys.exit(1)
        "
        
    - name: 📝 Comment on PR
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('🤖 PR Validation Results')
          );
          
          const status = '${{ job.status }}';
          const conclusion = status === 'success' ? '✅ PASSED' : '❌ FAILED';
          
          const body = `## 🤖 PR Validation Results
          
          **Status**: ${conclusion}
          
          ### Checks Performed:
          - 🧪 **Unit Tests**: ${status === 'success' ? '✅ Passed' : '❌ Failed'}
          - 🔍 **Lint Check**: ${status === 'success' ? '✅ Passed' : '❌ Failed'}  
          - 📊 **Coverage**: ${status === 'success' ? '✅ Passed' : '❌ Failed'}
          - 🚀 **Dashboard**: ${status === 'success' ? '✅ Passed' : '❌ Failed'}
          
          ${status === 'success' ? 
            '🎉 **All checks passed!** This PR is ready for review.' : 
            '⚠️ **Some checks failed.** Please review the workflow logs and fix any issues.'
          }
          
          ---
          *Automated by GitHub Actions • [View Details](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }

  require-checks:
    name: 🛡️ Require Checks
    runs-on: ubuntu-latest
    needs: pr-validation
    if: always()
    
    steps:
    - name: ✅ Validate required checks
      run: |
        if [[ "${{ needs.pr-validation.result }}" == "success" ]]; then
          echo "✅ All required checks passed! PR can be merged."
          exit 0
        else
          echo "❌ Required checks failed. PR cannot be merged."
          echo "PR Validation: ${{ needs.pr-validation.result }}"
          exit 1
        fi
