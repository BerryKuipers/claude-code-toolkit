name: 🧪 Test Suite

on:
  push:
    branches: [ development, main ]
  pull_request:
    branches: [ development, main ]
  workflow_dispatch:

jobs:
  test:
    name: 🐍 Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🎨 Code formatting check (Black)
      run: |
        black --check --diff src/ tests/ dashboard.py
        
    - name: 📏 Import sorting check (isort)
      run: |
        isort --check-only --diff src/ tests/ dashboard.py
        
    - name: 🔍 Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ tests/ dashboard.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 src/ tests/ dashboard.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: 🧪 Run tests with pytest
      env:
        # Mock environment variables for testing
        BITVAVO_API_KEY: "test_key"
        BITVAVO_API_SECRET: "test_secret"
        OPENAI_API_KEY: "test_openai_key"
        ANTHROPIC_API_KEY: "test_anthropic_key"
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing --cov-fail-under=10
        
    - name: 📊 Upload coverage to Codecov
      if: matrix.python-version == '3.12'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"
        
    - name: 🔒 Run security scan with bandit
      run: |
        pip install bandit[toml]
        bandit -r src/ dashboard.py -f json -o bandit-report.json || true
        bandit -r src/ dashboard.py
        
    - name: 🔍 Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🚀 Test Streamlit app startup
      env:
        BITVAVO_API_KEY: "test_key"
        BITVAVO_API_SECRET: "test_secret"
        OPENAI_API_KEY: "test_openai_key"
        ANTHROPIC_API_KEY: "test_anthropic_key"
      run: |
        # Test that the dashboard can start without errors
        timeout 30s streamlit run dashboard.py --server.headless true --server.port 8501 &
        sleep 10
        curl -f http://localhost:8501 || echo "Dashboard startup test completed"
        
  quality-gate:
    name: ✅ Quality Gate
    runs-on: ubuntu-latest
    needs: [test, security, integration]
    if: always()
    
    steps:
    - name: 📊 Check test results
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.security.result }}" == "success" && "${{ needs.integration.result }}" == "success" ]]; then
          echo "✅ All quality checks passed!"
          exit 0
        else
          echo "❌ Quality gate failed:"
          echo "  Tests: ${{ needs.test.result }}"
          echo "  Security: ${{ needs.security.result }}"
          echo "  Integration: ${{ needs.integration.result }}"
          exit 1
        fi
